#+TITLE Emacs configurations
#+PROPERTY: header-args:emacs-lisp :tangle ~/.config/emacs/init.el

* General
#+begin_src emacs-lisp
  (setq inhibit-startup-message t)
  (setq inhibit-splash-screen t)
  (setq make-backup-files nil) ; Do not save any backup files

  (scroll-bar-mode -1)     ;Disable visible scrollbar
  (tool-bar-mode -1)       ;Disable toolbar
  (menu-bar-mode -1)       ;Disable menubar

  ;; Whitespace config
  (global-set-key (kbd "<f4>") 'whitespace-mode)
  (global-set-key (kbd "C-x ~") 'delete-trailing-whitespace)

  ;; Select appropriate highlighting
  (setq whitespace-style
	'(face spaces trailing lines space-before-tab indentation empty space-after-tab
	       tab-mark missing-newline-at-eof))

  ;; Open in full screen by default
  (set-frame-parameter nil 'fullscreen 'maximized)

  ;; Automatically tangle our Emacs.org config file when we save it
  (defun custom/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
			(expand-file-name "~/.config/emacs/init.org"))

      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
	(org-babel-tangle))))

  (add-hook 'org-mode-hook
	    (lambda ()
	      (add-hook 'after-save-hook #'custom/org-babel-tangle-config)))

  ;; Use Melpa as a package manager
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (package-initialize)
  ;;  (package-refresh-contents)

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
#+end_src

** Theme
TODO: fix logos on mode line
#+begin_src emacs-lisp
  ;; Whole app theme
  (use-package doom-themes
    :ensure t
    :init (load-theme 'doom-palenight t)
    :config
    (set-cursor-color "cyan"))

  ;; Modeline theme
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1)
    :config
    (use-package nerd-icons
      :ensure t)
    (setq doom-modeline-icon nil))


#+end_src

** Improvement
#+begin_src emacs-lisp

  ;; Enhance minibuffer;;
  ;; better interactive search in minibuffer
  (use-package ivy
    :ensure t
    :init (ivy-mode 1)
    :config
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t))

  ;; Get summary descriptions with M-x
  (use-package ivy-rich
    :ensure t
    :init (ivy-rich-mode 1))

  ;; Substitute common elisp functions with ivy based alternatives
  (use-package counsel
    :ensure t
    :init (counsel-mode 1))

  ;; Improve indentation
  (use-package aggressive-indent
    :ensure t
    :init (global-aggressive-indent-mode 1))

  (electric-pair-mode 1);; Auto pair brackets

  ;; On the fly spell check
  (use-package flycheck
    :ensure t
    :init (global-flycheck-mode 1))

  ;; Improve incremental display of shorcut keys
  ;; Note: Might have to run 'M-x package-refresh-contents'
  (use-package which-key
    :ensure t
    :init (which-key-mode 1))

  ;; Replace multiple instance simultaneously
  (use-package iedit
    :ensure t)
 #+end_src

*** Improving teminal inside emacs
#+begin_src emacs-lisp
  ;; Avoid erasing prompts on backspace in shell
  (setq comint-prompt-read-only t)


  ;; Do not overwrite prompts on terminal
  (overwrite-mode 0)


  ;; Use vterm as shell
  (use-package use-package-ensure-system-package
    :ensure t)

  (use-package vterm
    :ensure t
    :ensure-system-package libtool-bin)
 #+end_src

*** Install magit for better git experience
    #+begin_src emacs-lisp
      (use-package magit
	:ensure t)
    #+end_src
* Org mode
** Basic
- TODO : Wrap after 100 columns
#+begin_src emacs-lisp
    ; Basic UI stuff
    (use-package org
      :config
      (org-indent-mode 1)
      (variable-pitch-mode 1)
      (auto-fill-mode 0))

    ; Improve the bullets styling with utf-8 encoding
    (use-package org-bullets
      :ensure t
      :after org
      :hook (org-mode . org-bullets-mode)
      :custom
      (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

    ; Improve font face for each level
    (dolist (face '((org-level-1 . 1.4)
		  (org-level-2 . 1.3)
		  (org-level-3 . 1.2)
		  (org-level-4 . 1.1)
		  (org-level-5 . 1.1)
		  (org-level-6 . 1.1)
		  (org-level-7 . 1.1)
		  (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :weight 'semi-bold :height (cdr face)))

    ; Center things in org mode
    (defun custom/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
	  visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :ensure t
    :hook (org-mode . custom/org-mode-visual-fill))

#+end_src

** Babel
TODO: Have support for C language

#+begin_src emacs-lisp

  ;; suported languages
  (org-babel-do-load-languages
    'org-babel-load-languages
    '((emacs-lisp . t)
      (python . t)
      (C . t)
      (shell . t)
      (js . t)))

  (setq org-confirm-babel-evaluate nil)

  ;; Setup templates for org block
  ;; This is needed as of Org 9.2
  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  ;;(add-to-list 'org-structure-template-alist '("c-cpp" . "src C"))
  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("js" . "src js"))

#+end_src

** Export
*** Setup default browser
#+begin_src emacs-lisp
(setq browse-url-browser-function 'browse-url-generic
      browse-url-generic-program "firefox")
#+end_src

*** Install twitter bootstarp
#+begin_src emacs-lisp
  (use-package ox-twbs
    :ensure t)
#+end_src

* Development
** Basic
#+begin_src emacs-lisp
  ;; Enable error display on modeline
  (defun custom/improve-lsp-mode-ui ()
    ;; Provide rich search for symbols,data types, classes etc
    (require 'lsp-ido)

    ;; setup custom keybinding
    (define-key lsp-mode-map (kbd "C-c l") lsp-command-map)

    ;; actions to show in modeline
    (lsp-modeline-code-actions-mode t)
    (setq lsp-modeline-code-actions-segments '(count icon))

    ;; Breadcrumbs for the file
    (lsp-headerline-breadcrumb-mode t)
    (setq lsp-headerline-breadcrumb-segments '(project file symbols))


    (lsp-enable-which-key-integration t)
    (setq lsp-modeline-diagnostics-enable t))

  (use-package lsp-mode
    :init
    (setq lsp-keymap-prefix "C-c l")
    :commands (lsp lsp-deferred)
    :hook ((lsp-mode . custom/improve-lsp-mode-ui)))
#+end_src

** UI Improvement
#+begin_src emacs-lisp
    ;; Completion suggestions
    (use-package company
      :after lsp-mode
      :hook (prog-mode . company-mode)
      :bind (:map company-active-map
	     ("<tab>" . company-complete-selection))
	    (:map lsp-mode-map
	     ("<tab>" . company-indent-or-complete-common))
      :custom
      (company-minimum-prefix-length 1)
      (company-idle-delay 0.0))


    ;; Improve ivy integration to lsp
    (use-package lsp-ivy
      :ensure t
      :commands lsp-ivy-workspace-symbol)

    ;; Improve real time documentation
  (use-package lsp-ui
    :ensure t
    :hook (lsp-mode . lsp-ui-mode)
    :config
      (setq lsp-ui-doc-position 'bottom)
      (setq lsp-ui-sideline-enable nil)
      (setq lsp-ui-sideline-show-hover nil))

#+end_src

** Language Specific
#+begin_src emacs-lisp
  (use-package c-mode
    :hook (c-mode . lsp-deferred)
    :config (c-set-style "linux"))

  (add-hook 'c++-mode-hook #'lsp-deferred)
  (add-hook 'rust-mode-hook #'lsp-deferred)
#+end_src
